/* tslint:disable */
/* eslint-disable */
/**
 * Parcorpus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { JobDto } from '../dto';
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user's latest upload jobs
         * @param {number} [page] Number of requested page (default is 1)
         * @param {number} [pageSize] Size of the requested page (default is 20, but must be between 3 and 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsGet: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get upload job status
         * @param {string} id Job Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1JobsIdGet.');
            }
            const localVarPath = `/api/v1/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload text
         * @param {string} [sourceLanguageCode] 
         * @param {string} [targetLanguageCode] 
         * @param {string} [title] 
         * @param {string} [author] 
         * @param {string} [source] 
         * @param {number} [creationYear] 
         * @param {Array<string>} [genres] 
         * @param {Blob} [sourceText] 
         * @param {Blob} [targetText] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsPostForm: async (sourceLanguageCode?: string, targetLanguageCode?: string, title?: string, author?: string, source?: string, creationYear?: number, genres?: Array<string>, sourceText?: Blob, targetText?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (sourceLanguageCode !== undefined) { 
                localVarFormParams.append('source_language_code', sourceLanguageCode as any);
            }

            if (targetLanguageCode !== undefined) { 
                localVarFormParams.append('target_language_code', targetLanguageCode as any);
            }

            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }

            if (author !== undefined) { 
                localVarFormParams.append('author', author as any);
            }

            if (source !== undefined) { 
                localVarFormParams.append('source', source as any);
            }

            if (creationYear !== undefined) { 
                localVarFormParams.append('creation_year', creationYear as any);
            }
            if (genres) {
                genres.forEach((element) => {
                    localVarFormParams.append('genres', element as any);
                })
            }

            if (sourceText !== undefined) { 
                localVarFormParams.append('source_text', sourceText as any);
            }

            if (targetText !== undefined) { 
                localVarFormParams.append('target_text', targetText as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user's latest upload jobs
         * @param {number} [page] Number of requested page (default is 1)
         * @param {number} [pageSize] Size of the requested page (default is 20, but must be between 3 and 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsGet(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<JobDto>>>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).apiV1JobsGet(page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get upload job status
         * @param {string} id Job Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobDto>>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).apiV1JobsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload text
         * @param {string} [sourceLanguageCode] 
         * @param {string} [targetLanguageCode] 
         * @param {string} [title] 
         * @param {string} [author] 
         * @param {string} [source] 
         * @param {number} [creationYear] 
         * @param {Array<string>} [genres] 
         * @param {Blob} [sourceText] 
         * @param {Blob} [targetText] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsPostForm(sourceLanguageCode?: string, targetLanguageCode?: string, title?: string, author?: string, source?: string, creationYear?: number, genres?: Array<string>, sourceText?: Blob, targetText?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobDto>>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).apiV1JobsPostForm(sourceLanguageCode, targetLanguageCode, title, author, source, creationYear, genres, sourceText, targetText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get user's latest upload jobs
         * @param {number} [page] Number of requested page (default is 1)
         * @param {number} [pageSize] Size of the requested page (default is 20, but must be between 3 and 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsGet(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<JobDto>>> {
            return JobsApiFp(configuration).apiV1JobsGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get upload job status
         * @param {string} id Job Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<JobDto>> {
            return JobsApiFp(configuration).apiV1JobsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload text
         * @param {string} [sourceLanguageCode] 
         * @param {string} [targetLanguageCode] 
         * @param {string} [title] 
         * @param {string} [author] 
         * @param {string} [source] 
         * @param {number} [creationYear] 
         * @param {Array<string>} [genres] 
         * @param {Blob} [sourceText] 
         * @param {Blob} [targetText] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsPostForm(sourceLanguageCode?: string, targetLanguageCode?: string, title?: string, author?: string, source?: string, creationYear?: number, genres?: Array<string>, sourceText?: Blob, targetText?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<JobDto>> {
            return JobsApiFp(configuration).apiV1JobsPostForm(sourceLanguageCode, targetLanguageCode, title, author, source, creationYear, genres, sourceText, targetText, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary Get user's latest upload jobs
     * @param {number} [page] Number of requested page (default is 1)
     * @param {number} [pageSize] Size of the requested page (default is 20, but must be between 3 and 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public async apiV1JobsGet(page?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<JobDto>>> {
        return JobsApiFp(this.configuration).apiV1JobsGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get upload job status
     * @param {string} id Job Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public async apiV1JobsIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<JobDto>> {
        return JobsApiFp(this.configuration).apiV1JobsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Upload text
     * @param {string} [sourceLanguageCode] 
     * @param {string} [targetLanguageCode] 
     * @param {string} [title] 
     * @param {string} [author] 
     * @param {string} [source] 
     * @param {number} [creationYear] 
     * @param {Array<string>} [genres] 
     * @param {Blob} [sourceText] 
     * @param {Blob} [targetText] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public async apiV1JobsPostForm(sourceLanguageCode?: string, targetLanguageCode?: string, title?: string, author?: string, source?: string, creationYear?: number, genres?: Array<string>, sourceText?: Blob, targetText?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<JobDto>> {
        return JobsApiFp(this.configuration).apiV1JobsPostForm(sourceLanguageCode, targetLanguageCode, title, author, source, creationYear, genres, sourceText, targetText, options).then((request) => request(this.axios, this.basePath));
    }
}
